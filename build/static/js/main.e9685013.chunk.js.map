{"version":3,"sources":["logo.svg","components/Header/Header.jsx","context/AppReducer.js","context/context.js","utils/format.js","components/Balance/Balance.jsx","components/IncomeAndOutgoings/IncomeAndOutgoings.jsx","components/Transaction/Transaction.jsx","components/PurchaseList/PurchaseList.jsx","components/AddNewTransaction/AddNewTransaction.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","state","action","type","loading","transactions","payload","filter","transaction","_id","error","initialState","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","a","axios","get","response","data","id","delete","config","post","Provider","value","getTransactions","deleteTransaction","addTransaction","numberWithCommas","x","toString","replace","Balance","total","useContext","map","amount","reduce","totalValue","currentItemValue","toFixed","IncomeAndOutgoings","amounts","totalIncome","item","totalOutgoings","className","Transaction","symbol","text","Math","abs","onClick","PurchaseList","useEffect","AddNewTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholdder","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e9685013.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","\nconst Header = () => {\n    return (\n        <h2>\n            Eye on The Money\n        </h2>\n    );\n}\n\n\nexport default Header;","\n// Reducer is how we specify state changes in response to specific actions\n// each action must be added to a case type in reducer\n\n\n// spread current state in new case\n// if transaction id is not the same as its' payload, filter out\n\nexport default (state, action) => {\n    switch (action.type) {\n        case 'GET_TRANSACTIONS':\n            return {\n                ...state,\n                loading: false,\n                transactions: action.payload\n            }\n        case 'DELETE_TRANSACTION':\n            return {\n                ...state,\n                transactions: state.transactions.filter(transaction => transaction._id !== action.payload)\n            }\n\n        case 'ADD_TRANSACTION':\n            return {\n                ...state,\n                transactions: [...state.transactions, action.payload]\n            }\n        case 'TRANSACTION_ERROR':\n            return {\n                ...state,\n                error: action.payload\n            }\n        default:\n            return state\n    }\n}","import { createContext, useReducer } from \"react\";\nimport AppReducer from \"./AppReducer\";\nimport axios from 'axios';\n\n// initial state\n// transaction using dummy data - to perform calculations, i.e balance\n// using useContext in other components, we can destructure and extract anything we want from our initial state, i.e. transactions..\n\nconst initialState = {\n    transactions: [],\n    error: null,\n    loading: true\n}\n\n// useContext to avoid pop drilling\nexport const GlobalContext = createContext(initialState);\n\n// Create Provider component to give context and state and actions access to all components\n// value object of transactions allows transactions access to all components\n\n// children are all components wrapped in Appjs\n\nexport const GlobalProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(AppReducer, initialState);\n\n    // Actions\n\n    // connect front end with backend\n    // similar to GET request on Postman \n    async function getTransactions() {\n        try {\n            // fetch transaction from API in the backend\n            const response = await axios.get('/api/v1/transactions');\n\n            // get transaction object from response\n            // send into state\n            dispatch({\n                type: 'GET_TRANSACTIONS',\n                payload: response.data.data\n            })\n\n        } catch (error) {\n            dispatch({\n                type: 'TRANSACTION_ERROR',\n                payload: error.response.data.error\n            })\n        }\n    }\n\n\n    // payload is any data we want to send to our reducer\n    // pass reducer in AppReducer.js file\n    // call transaction on axios delete function and delete from server\n    async function deleteTransaction(id) {\n        try {\n            await axios.delete(`/api/v1/transactions/${id}`);\n\n            dispatch({\n                type: 'DELETE_TRANSACTION',\n                payload: id\n            });\n        } catch (error) {\n            dispatch({\n                type: 'TRANSACTION_ERROR',\n                payload: error.response.data.error\n            })\n        }\n\n    }\n\n    async function addTransaction(transaction) {\n        // define content type to push to DB\n        const config = {\n            'Content-Type': 'application/json'\n        }\n\n        // post transaction and config to DB\n        try {\n            const response = await axios.post('/api/v1/transactions', transaction, config);\n\n            dispatch({\n                type: 'ADD_TRANSACTION',\n                payload: response.data.data\n            });\n        } catch (error) {\n            dispatch({\n                type: 'TRANSACTION_ERROR',\n                payload: error.response.data.error\n            })\n        }\n    }\n\n\n    // in order to get access to reducer functions, it must passed in Provider\n\n    return (<GlobalContext.Provider value={{\n        transactions: state.transactions,\n        error: state.error,\n        loading: state.loading,\n        getTransactions,\n        deleteTransaction,\n        addTransaction\n    }}>\n        {children}\n    </GlobalContext.Provider>)\n}","// insert all formatting functions\n\n// add commas with numbers\nexport function numberWithCommas(x) {\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}","import { useContext } from 'react';\nimport { GlobalContext } from '../../context/context';\nimport { numberWithCommas } from '../../utils/format'\n\nimport './balance.css'\n\nconst Balance = () => {\n\n    // get access and pull information from context file\n    const { transactions } = useContext(GlobalContext);\n\n    // calculate total balance\n\n    // put amount of each transaction in new array\n    const amounts = transactions.map(transaction => transaction.amount);\n\n    // add total amount using reduce function\n    const total = amounts.reduce((totalValue, currentItemValue) => (totalValue += currentItemValue), 0).toFixed(2);\n\n    return (\n        <>\n            <h4>Your Balance</h4>\n            <h1>£{numberWithCommas(total)}</h1>\n        </>\n    );\n\n\n}\n\nexport default Balance;","\nimport { useContext } from 'react';\nimport { GlobalContext } from '../../context/context';\nimport { numberWithCommas } from '../../utils/format'\n\nimport './IncomeAndOutgoings.css'\n\nconst IncomeAndOutgoings = () => {\n\n    // get access and pull information from context file\n    const { transactions } = useContext(GlobalContext);\n\n    // calculate total income and total outgoings\n\n    // put amount of each transaction in new array\n    const amounts = transactions.map(transaction => transaction.amount);\n\n    // use filter function to determine income vs outgoing\n    // then calculate using reduce function\n    const totalIncome = amounts.filter(\n        item => item > 0).reduce((totalValue, currentItemValue) => (totalValue += currentItemValue), 0)\n        .toFixed(2);\n\n    const totalOutgoings = (amounts.filter(item => item < 0).reduce((totalValue, currentItemValue) => (totalValue += currentItemValue), 0) * -1).toFixed(2);\n\n    return (\n        <div className=\"inc-exp-container\">\n            <div>\n                <h4>Income</h4>\n                <p className=\"money plus\">£{numberWithCommas(totalIncome)}</p>\n            </div>\n            <div>\n                <h4>Outgoings</h4>\n                <p className=\"money minus\">£{numberWithCommas(totalOutgoings)}</p>\n            </div>\n\n\n        </div>\n\n    );\n}\n\nexport default IncomeAndOutgoings;","\nimport { useContext } from \"react\";\nimport { GlobalContext } from \"../../context/context\";\nimport { numberWithCommas } from '../../utils/format'\n\n\nconst Transaction = ({ transaction }) => {\n\n    // get deleteTransaction state from contextjs\n    const { deleteTransaction } = useContext(GlobalContext)\n\n    // determine income or expenditure symbol based on user amount\n    // if symbol is - display red for expenditure : if + display green for income\n    const symbol = transaction.amount < 0 ? '-' : '+';\n\n    // Math.abs function makes numbers absolute\n\n    return (\n        <li className={transaction.amount < 0 ? 'minus' : 'plus'}>\n            {transaction.text} <span>{symbol}£{numberWithCommas(Math.abs(transaction.amount))}</span><button className=\"delete-btn\" onClick={() => deleteTransaction(transaction._id)}>x</button>\n        </li>\n    );\n}\n\nexport default Transaction;","\nimport { useContext, useEffect } from \"react\";\nimport { GlobalContext } from \"../../context/context\";\nimport Transaction from \"../Transaction/Transaction\";\n\n\nconst PurchaseList = () => {\n\n\n    // get access and pull information from context file\n    const { transactions, getTransactions } = useContext(GlobalContext);\n\n    useEffect(() => {\n        getTransactions();\n    }, [])\n\n    // Passed Transaction component needs to have unique key and prop from transactions in context\n\n    return (\n        <>\n            <h3>History</h3>\n            <ul className=\"list\">\n                {transactions.map((transaction) => (<Transaction key={transaction.id} transaction={transaction} />\n                ))}\n\n            </ul>\n        </>\n    );\n}\n\nexport default PurchaseList;","import { useState, useContext } from \"react\";\nimport { GlobalContext } from \"../../context/context\";\n\n\nconst AddNewTransaction = () => {\n\n    // useState to change user input for transaction item\n    const [text, setText] = useState('')\n\n    // useState to change user input for amount\n    const [amount, setAmount] = useState(0)\n\n    // get addransaction state from contextjs\n    const { addTransaction } = useContext(GlobalContext)\n\n    // when form is submitted\n    // create new transaction object with random id and default state of text and amount\n    // call addTransaction context with new transaction as arg\n    // convert amount to number\n    const onSubmit = e => {\n        e.preventDefault();\n\n        const newTransaction = {\n            id: Math.floor(Math.random() * 100000000),\n            text,\n            amount: +amount\n        }\n\n        addTransaction(newTransaction)\n    }\n\n    return (\n        <>\n            <h3>Add new transaction</h3>\n            <form onSubmit={onSubmit}>\n                <div className=\"form-control\">\n                    <label htmlFor=\"text\">Transaction description</label>\n                    <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} placeholdder=\"Enter item\" />\n                </div>\n                <div className=\"form-control\">\n                    <label htmlFor=\"amount\">Amount <br /> (negative = expense, positive = income)</label>\n                    <input type=\"number\" value={amount} onChange={(e) => setAmount(e.target.value)} />\n                    <button className=\"btn\">Add transaction</button>\n                </div>\n            </form>\n        </>\n\n    );\n}\n\nexport default AddNewTransaction;","import logo from './logo.svg';\nimport Header from './components/Header/Header';\nimport Balance from './components/Balance/Balance'\nimport IncomeAndOutgoings from './components/IncomeAndOutgoings/IncomeAndOutgoings';\nimport PurchaseList from './components/PurchaseList/PurchaseList';\nimport AddNewTransaction from './components/AddNewTransaction/AddNewTransaction';\nimport { GlobalProvider } from './context/context';\n\nimport './App.css';\n\n\n// wrap all components in GlobalProvider to give access to context in APPjs \n\nfunction App() {\n\n\n  return (\n    <GlobalProvider>\n      <Header />\n      <div className=\"container\">\n        <Balance />\n        <IncomeAndOutgoings />\n        <PurchaseList />\n        <AddNewTransaction />\n      </div>\n    </GlobalProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}